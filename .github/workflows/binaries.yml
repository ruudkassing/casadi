name: binaries

on: push

env:
  cache-suffix: v3
  build_flags: "-DWITH_COMMON=OFF -DWITH_BUILD_REQUIRED=ON -DWITH_BUILD_BONMIN=ON -DWITH_BONMIN=ON -DWITH_IPOPT=ON -DWITH_BUILD_IPOPT=ON -DWITH_BUILD_LAPACK=ON -DWITH_LAPACK=ON -DWITH_MUMPS=ON -DWITH_CLP=ON -DWITH_BUILD_CLP=ON -DWITH_CBC=ON -DWITH_BUILD_CBC=ON -DWITH_THREAD=ON -DWITH_QPOASES=ON -DWITH_HPIPM=ON -DWITH_BLASFEO=ON -DWITH_BUILD_HPIPM=ON -DWITH_BUILD_BLASFEO=ON -DWITH_HIGHS=ON -DWITH_BUILD_HIGHS=ON -DWITH_BUILD_SPRAL=ON -DWITH_SPRAL=ON -DWITH_PROXQP=ON -DWITH_BUILD_PROXQP=ON -DWITH_BUILD_EIGEN3=ON -DWITH_BUILD_SIMDE=ON -DWITH_OSQP=ON -DWITH_SUPERSCS=ON -DWITH_KNITRO=ON -DWITH_MOCKUP_KNITRO=ON -DWITH_CPLEX=ON -DWITH_MOCKUP_CPLEX=ON -DWITH_GUROBI=ON -DWITH_MOCKUP_GUROBI=ON -DWITH_HSL=ON -DWITH_MOCKUP_HSL=ON  -DWITH_WORHP=ON -DWITH_MOCKUP_WORHP=ON"
  build_flags_32bit: "-DWITH_HPIPM=OFF -DWITH_BLASFEO=OFF -DWITH_BUILD_HPIPM=OFF -DWITH_BUILD_BLASFEO=OFF -DWITH_CPLEX=OFF"
  build_flags_manylinux1: "-DWITH_HIGHS=OFF -DWITH_BUILD_HIGHS=OFF -DWITH_BUILD_SPRAL=OFF -DWITH_SPRAL=OFF -DWITH_PROXQP=OFF -DWITH_BUILD_PROXQP=OFF -DWITH_BUILD_EIGEN3=OFF -DWITH_BUILD_SIMDE=OFF"
  build_flags_windows: ""
  build_flags_mac: "-DWITH_SPRAL=OFF -DWITH_BUILD_SPRAL=OFF -DWITH_BUILD_LAPACK=OFF"
  build_flags_mac_intel: "-DWITH_PROXQP=OFF -DWITH_BUILD_PROXQP=OFF -DWITH_BUILD_EIGEN3=OFF -DWITH_BUILD_SIMDE=OFF"
  build_flags_mac_m1: "-DALLOW_DOCKER=ON -DWITH_HPIPM=OFF -DWITH_BUILD_HPIPM=OFF"

jobs:
  swig:
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0 # for git-restore-mtime
    - uses: chetan/git-restore-mtime-action@v1.2
          
    - name: generate Python 2
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make python_source && cd .. && rm -rf build"
        
    - name: generate Python 3
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON3=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make python_source && cd .. && rm -rf build"

    - name: generate Matlab
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_MATLAB=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make matlab_source && cd .. && rm -rf build"
    
    - name: set CMAKE default options
      run: |
         sed -i 's/option(SWIG_IMPORT "Export SWIG" OFF)/option(SWIG_IMPORT "Import SWIG" ON)/g' CMakeLists.txt

    - name: build archives
      run: |
        zip -rq ../casadi_source.zip . --exclude '.*' --exclude '*/.*' --exclude 'appveyor.yml'
        mv ../casadi_source.zip casadi_source.zip
    
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v4.4.0
    - run: cp casadi_source.zip casadi-${{ env.GITHUB_REF_SLUG }}-source.zip
    - name: Upload files to a GitHub release
      uses: svenstaro/upload-release-action@2.4.0
      with:
        overwrite: true
        tag: nightly-${{ env.GITHUB_REF_SLUG }}
        file: casadi-${{ env.GITHUB_REF_SLUG }}-source.zip
        prerelease: true

    - uses: actions/upload-artifact@v3.1.2
      with:
        name: casadi_source_wrapper
        path: casadi_source.zip

  core-dockcross:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [manylinux2014-x64]
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0 # for git-restore-mtime
          submodules: recursive
      - uses: chetan/git-restore-mtime-action@v1.2
      - name: Setup dockcross
        run: |
          docker pull ghcr.io/jgillis/${{ matrix.target }}:production
          docker image inspect ghcr.io/jgillis/${{ matrix.target }}:production
          docker run --rm --env DEFAULT_DOCKCROSS_IMAGE=ghcr.io/jgillis/${{ matrix.target }}:production ghcr.io/jgillis/${{ matrix.target }}:production > dockcross
          chmod +x dockcross
          pwd
          ls -al dockcross
      - name: Cache build dir
        uses: actions/cache@v3.2.3
        with:
          key: core-build-${{ matrix.target }}-${{env.cache-suffix}}
          path: build
      - uses: casadi/mockups@master
        with:
          tag: ${{ matrix.target }}
      - name: Build
        run: |
          rm -f build/CMakeCache.txt
          ./dockcross cmake -Bbuild -DWITH_SELFCONTAINED=ON ${{env.build_flags}} ${{ contains(matrix.target,'86') && env.build_flags_32bit || ''}} ${{ contains(matrix.target,'manylinux1') && env.build_flags_manylinux1 || ''}} ${{ contains(matrix.target,'windows') && env.build_flags_windows || ''}} -DCMAKE_PREFIX_PATH=/work/mockups/cmake -H.

          # In MXE land, (cross).pkg-config does not listen to PKG_CONFIG_PATH straight see https://mxe.cc/#tutorial-4
          # Needed to make CoinUtils work
          ./dockcross --args "--env PKG_CONFIG_PATH_x86_64_w64_mingw32_shared_posix=/work/build/external_projects/lib64/pkgconfig:/work/build/external_projects/lib/pkgconfig:/work/build/external_projects/share/pkgconfig" -- /work/.github/workflows/patch_toolchain cmake --build build -v
      - run: zip -rq ${{github.job}}-${{matrix.target}}.zip build
      - uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{github.job}}-${{ matrix.target}}
          path: ${{github.job}}-${{matrix.target}}.zip
          retention-days: 5
          
  matrix-arch-py2:
    runs-on: ubuntu-20.04
    steps:
      - id: build-matrix
        uses: jgillis/setup-build-matrix@v1.2.0-if
        with:
          config: |
            matrix:
              arch: [manylinux2014-x64]
              py2: ["310"]
            operations: []

    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
              
  matlab-dockcross:
    needs: [core-dockcross,swig]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: octave
            version: 7.3.0
            arch: manylinux2014-x64
    steps: 
      - uses: actions/download-artifact@v3.0.2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - uses: actions/download-artifact@v3.0.2
        with:
          name: core-dockcross-${{ matrix.arch }}
      - run: ls
      - run: unzip core-dockcross-${{ matrix.arch }}.zip
      - name: Setup dockcross
        run: |
          docker pull ghcr.io/jgillis/${{ matrix.arch }}:production
          docker run --rm --env DEFAULT_DOCKCROSS_IMAGE=ghcr.io/jgillis/${{ matrix.arch }}:production ghcr.io/jgillis/${{ matrix.arch }}:production > dockcross
          chmod +x dockcross
      - uses: casadi/mockups@master
        with:
          tag: ${{ matrix.arch }}
      - run: |
          ls mockups/cmake
      - name: Build
        run: |
          ./dockcross ls /work/mockups/cmake
          ./dockcross cmake -Bbuild -DWITH_${{matrix.host == 'matlab' && 'MATLAB' || 'OCTAVE' }}=ON -USWIG_IMPORT  -DCMAKE_INSTALL_PREFIX=/work/install -DSKIP_CONFIG_H_GENERATION=ON -DWITH_OCTAVE_IMPORT=ON -DCMAKE_PREFIX_PATH=/work/mockups/cmake
          ./dockcross cmake --build build --target install -v
      - uses: kanga333/variable-mapper@v0.3.0
        with:
          key: "${{matrix.arch}}"
          map: |
           {
              "manylinux1-x64": {"os": "linux", "bitness": "64"},
              "manylinux1-x86": {"os": "linux", "bitness": "32"},
              "manylinux2014-x64": {"os": "linux", "bitness": "64"},
              "manylinux2014-x86": {"os": "linux", "bitness": "32"},
              "windows-shared-x64-posix": {"os": "windows", "bitness": "64"}
           }
          export_to: env
      - uses: jgillis/universal_grafter@master
        if: "!contains(matrix.arch, 'windows')"
        with:
          source_path: install/casadi
          destination_path: install/casadi
          dockcross: ${{ matrix.arch }}
          bitness: ${{env.bitness}}
      - run: |
             cd install/casadi
             zip -rq ../../casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip .
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.0
      - run: cp casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip casadi-${{ env.GITHUB_REF_SLUG }}-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: casadi-*-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
          fail-if-no-release: false
          fail-if-no-assets: false
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.4.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: casadi-${{ env.GITHUB_REF_SLUG }}-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
          prerelease: true

      - uses: actions/upload-artifact@v3.1.2
        with:
          name: casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}
          path: casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
          retention-days: 5
      
  python-dockcross:
    needs: [core-dockcross,matrix-arch-py2,swig]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-arch-py2.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - run: cat CMakeLists.txt
      - uses: actions/download-artifact@v3.0.2
        with:
          name: core-dockcross-${{ matrix.arch }}
      - run: ls
      - run: unzip core-dockcross-${{ matrix.arch }}.zip
      - name: Setup dockcross
        run: |
          docker pull ghcr.io/jgillis/${{ matrix.arch }}:production
          docker run --rm --env DEFAULT_DOCKCROSS_IMAGE=ghcr.io/jgillis/${{ matrix.arch }}:production ghcr.io/jgillis/${{ matrix.arch }}:production > dockcross
          chmod +x dockcross
      - run: echo ${{env.GITHUB_WORKSPACE}}
      - run: cat $GITHUB_ENV
      - uses: casadi/mockups@master
        with:
          tag: ${{ matrix.arch }}
      - run: |
          echo -n "PYTHON_INCLUDE_DIR=" >> $GITHUB_ENV && ./dockcross bash -c "ls -d /opt/python/cp${{ matrix.py2 }}*/include/python* | head -n 1" >> $GITHUB_ENV && tail $GITHUB_ENV
      - name: (windows target only) get Python
        if: contains(matrix.arch, 'windows')
        run: |
          archx=$(python -c "print([e for e in '${{matrix.arch}}'.split('-') if e.startswith('x')][0])")
          wget https://github.com/casadi/artifacts/releases/download/evergreen/windows_python${{ matrix.py2 }}_$archx.zip -O python.zip && unzip python.zip -d python
          pwd
          tree python
          echo "PYTHON_INCLUDE_DIR=/work/python/include" >> $GITHUB_ENV
          echo "PYTHON_LIBRARIES=/work/python/libs/python${{ matrix.py2 }}.lib" >> $GITHUB_ENV
      - run: rm -rf install
      - name: Build
        run: |
          ./dockcross cmake -Bbuild -DWITH_PYTHON=ON -DPYTHON_LIBRARIES=${{ env.PYTHON_LIBRARIES}} -DPYTHON_INCLUDE_DIR=${{ env.PYTHON_INCLUDE_DIR }} -USWIG_IMPORT  -DCMAKE_INSTALL_PREFIX=/work/install -DSKIP_CONFIG_H_GENERATION=ON
          ./dockcross cmake --build build --target install -v
      - uses: kanga333/variable-mapper@v0.3.0
        with:
          key: "${{matrix.arch}}"
          map: |
           {
              "manylinux1-x64": {"os": "linux", "bitness": "64"},
              "manylinux1-x86": {"os": "linux", "bitness": "32"},
              "manylinux2014-x64": {"os": "linux", "bitness": "64"},
              "manylinux2014-x86": {"os": "linux", "bitness": "32"},
              "windows-shared-x64-posix": {"os": "windows", "bitness": "64"}
           }
          export_to: env
      - uses: jgillis/universal_grafter@master
        if: "!contains(matrix.arch, 'windows')"
        with:
          source_path: install/casadi
          destination_path: install/casadi
          dockcross: ${{ matrix.arch }}
          bitness: ${{env.bitness}}
      - run: |
             cd install
             echo "This file (and the casadi directory) should end up in a folder called 'casadi-${{env.os}}${{env.bitness}}-py${{matrix.py2}}'" > dummy.txt
             zip -rq ../casadi-${{env.os}}${{env.bitness}}-py${{matrix.py2}}.zip .
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.0
      - run: cp casadi-${{env.os}}${{env.bitness}}-py${{matrix.py2}}.zip casadi-${{ env.GITHUB_REF_SLUG }}-${{env.os}}${{env.bitness}}-py${{matrix.py2}}.zip
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: casadi-*-${{env.os}}${{env.bitness}}-py${{matrix.py2}}.zip
          fail-if-no-release: false
          fail-if-no-assets: false
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.4.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: casadi-${{ env.GITHUB_REF_SLUG }}-${{env.os}}${{env.bitness}}-py${{matrix.py2}}.zip
          prerelease: true

      - uses: actions/upload-artifact@v3.1.2
        with:
          name: casadi-${{env.os}}${{env.bitness}}-py${{matrix.py2}}
          path: casadi-${{env.os}}${{env.bitness}}-py${{matrix.py2}}.zip
          retention-days: 5
      
      - run: |
          version=$(python misc/get_version.py)
          echo "<$version>"
          pip install wheel==0.31.1
          wheel=$(python misc/create_wheel_local.py $version.dev+${{ env.GITHUB_REF_SLUG }} ${{matrix.py2}} ${{env.os}} ${{env.bitness}} ${{matrix.arch}} install/)
          echo "<$wheel>"
          echo "wheel=$wheel" >> $GITHUB_OUTPUT
          wheel_wildcard=$(echo $wheel | sed -e 's/casadi-[^-]*-/casadi-\*-/')
          echo "wheel=$wheel" >> $GITHUB_OUTPUT
          echo "<$wheel_wildcard>"
          echo "<$wheel_wildcard2>"
          echo "wheel_wildcard=$wheel_wildcard" >> $GITHUB_OUTPUT
        id: wheel
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: ${{ steps.wheel.outputs.wheel_wildcard }}
          fail-if-no-assets: false
          fail-if-no-release: false
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.4.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: ${{ steps.wheel.outputs.wheel }}
          prerelease: true
  
  docs:
    runs-on: ubuntu-22.04
    needs: [python-dockcross,matlab-dockcross]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/download-artifact@v3.0.2
        with:
          name: casadi-linux64-py310
      - name: Unpack source
        run: unzip casadi-linux64-py310.zip -d casadi_python
      - uses: actions/download-artifact@v3.0.2
        with:
          name: casadi-linux64-octave7.3.0
      - name: Unpack source
        run: unzip casadi-linux64-octave7.3.0.zip -d casadi_octave
      - run: chmod -R a+w . && docker run --rm -v`pwd`:/local -v${{ github.workspace }}/casadi_python:/casadi_python:ro -v${{ github.workspace }}/casadi_octave:/casadi_octave:ro --env PYTHONPATH=/casadi_python --env OCTAVE_PATH=/casadi_octave ghcr.io/casadi/ci-doc:latest /bin/bash -c "cd docs/users_guide && rm -rf build && rm -f snippets/* && make && cd ../../test && make user_guide_snippets_py user_guide_snippets_oct && cd .. && rm -rf docs/users_guide/build && cd docs/api && make full doxexport doxpublish"
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.0
      - uses: svenstaro/upload-release-action@2.4.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: docs/users_guide/users_guide.pdf
          prerelease: true
      - run: git status
      - run: |
          git stash
          git pull origin ${{ env.GITHUB_REF_SLUG }}
          # If stash is nonempty, pop it
          git stash list | grep -q . && git stash pop
          git config --local user.email "casaditestbot@gmail.com"
          git config --local user.name "casadibot"
          git commit -a -m "automated commit by docs target [skip ci]"
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          branch: ${{ env.GITHUB_REF_SLUG }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
